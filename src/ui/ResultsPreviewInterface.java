/* 
 * Copyright (C) 2014 David Barry <david.barry at cancer.org.uk>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package ui;

import ParticleTracking.Analyse_;
import ParticleTracking.ParticleTrajectory;
import ParticleTracking.UserVariables;
import UIClasses.UIMethods;
import ij.ImagePlus;
import ij.ImageStack;
import ij.gui.ImageCanvas;
import ij.plugin.RGBStackMerge;
import ij.process.ImageProcessor;
import java.awt.Color;
import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.Scanner;
import javax.swing.DefaultBoundedRangeModel;
import javax.swing.JTextField;

public class ResultsPreviewInterface extends javax.swing.JDialog {

    private final String title;
    private final Analyse_ analyser;
    private final ImagePlus imp;
    private ImageStack stack;
    private final ArrayList<ParticleTrajectory> trajectories;
    private boolean wasOKed;
    private ArrayList<Integer> removeList;

    /**
     * Creates new form ResultsPreviewer
     */
    public ResultsPreviewInterface(java.awt.Frame parent, boolean modal, String title, Analyse_ analyser) {
        super(parent, modal);
        this.title = title;
        this.analyser = analyser;
        ImageStack stacks[] = getStacks();
        stack = (new RGBStackMerge()).mergeStacks(stacks[0].getWidth(), stacks[0].getHeight(), stacks[0].getSize(), stacks[0], stacks[1], null, true);
        imp = new ImagePlus("", stack.getProcessor(1));
        trajectories = analyser.getTrajectories();
        initComponents();
        trajScrollBarAdjustmentValueChanged(null);
        UIMethods.centreDialog(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        canvas = new ImageCanvas(imp);
        trajScrollBar = new javax.swing.JScrollBar();
        trajTextField = new javax.swing.JTextField();
        removeButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        imageScrollBar = new javax.swing.JScrollBar();
        imageTextField = new javax.swing.JTextField();
        removeTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(title);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        canvas.setPreferredSize(new java.awt.Dimension(256, 256));
        canvas.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                canvasComponentResized(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.6;
        gridBagConstraints.weighty = 0.75;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(canvas, gridBagConstraints);

        trajScrollBar.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
        trajScrollBar.setModel(new DefaultBoundedRangeModel(0, 0, 0, trajectories.size()-1));
        trajScrollBar.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                trajScrollBarAdjustmentValueChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.8;
        gridBagConstraints.weighty = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(trajScrollBar, gridBagConstraints);

        trajTextField.setEditable(false);
        trajTextField.setText(String.valueOf(trajScrollBar.getValue()));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(trajTextField, gridBagConstraints);

        removeButton.setText("Keep");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.weighty = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(removeButton, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(okButton, gridBagConstraints);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(cancelButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.weighty = 0.05;
        getContentPane().add(jPanel1, gridBagConstraints);

        imageScrollBar.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
        imageScrollBar.setModel(new DefaultBoundedRangeModel(1, 0, 1, analyser.getStacks()[0].getSize()));
        imageScrollBar.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                imageScrollBarAdjustmentValueChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.8;
        gridBagConstraints.weighty = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(imageScrollBar, gridBagConstraints);

        imageTextField.setText(String.valueOf(imageScrollBar.getValue()));
        imageTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(imageTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(removeTextField, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void imageScrollBarAdjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_imageScrollBarAdjustmentValueChanged
        updateTextField(imageTextField, imageScrollBar.getValue());
        imp.setProcessor(stack.getProcessor(imageScrollBar.getValue()));
        canvas.repaint();
    }//GEN-LAST:event_imageScrollBarAdjustmentValueChanged

    private void trajScrollBarAdjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_trajScrollBarAdjustmentValueChanged
        updateTextField(trajTextField, trajScrollBar.getValue());
        ImageStack stacks[] = getStacks();
        stack = analyser.mapTrajectories((new RGBStackMerge()).mergeStacks(stacks[0].getWidth(), stacks[0].getHeight(), stacks[0].getSize(), stacks[0], stacks[1], null, true),
                trajectories, UserVariables.getSpatialRes(), UserVariables.getMinTrajLength(),
                UserVariables.getTimeRes(), true, trajScrollBar.getValue(), trajScrollBar.getValue(),
                trajScrollBar.getValue(), true, 5);
        imageScrollBar.setValue((trajectories.get(trajScrollBar.getValue())).getStartTimeIndex() + 1);
        imageScrollBarAdjustmentValueChanged(null);
    }//GEN-LAST:event_trajScrollBarAdjustmentValueChanged

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        removeTextField.setText(removeTextField.getText() + " " + String.valueOf(trajScrollBar.getValue()));
        removeTextField.setBackground(Color.white);
    }//GEN-LAST:event_removeButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        Scanner scan = new Scanner(removeTextField.getText()).useDelimiter("\\s+");
        removeList = new ArrayList();
        boolean valid = true;
        try {
            while (scan.hasNext()) {
                removeList.add(scan.nextInt());
            }
        } catch (InputMismatchException e) {
            valid = false;
        }
        if (valid) {
            this.dispose();
            wasOKed = true;
        } else {
            removeTextField.setBackground(Color.red);
        }
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
        wasOKed = false;
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void canvasComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_canvasComponentResized
        ((ImageCanvas) canvas).setMagnification(1.0 / UIMethods.getMagnification(imp.getProcessor(), canvas));
    }//GEN-LAST:event_canvasComponentResized

    void updateTextField(JTextField field, int value) {
        field.setText(String.valueOf(value));
    }

    public boolean isWasOKed() {
        return wasOKed;
    }

    public ArrayList<Integer> getRemoveList() {
        return removeList;
    }

    ImageStack[] getStacks() {
        ImageStack output[] = new ImageStack[2];
        ImageStack stacks[] = analyser.getStacks();
        int s = stacks[0].getSize();
        for (int i = 1; i <= s; i++) {
            ImageProcessor ip1 = stacks[0].getProcessor(i);
            ip1.resetMinAndMax();
            if (output[0] == null) {
                output[0] = new ImageStack(stacks[0].getWidth(), stacks[0].getHeight());
            }
            output[0].addSlice(ip1);
            if (stacks[1] != null) {
                ImageProcessor ip2 = stacks[1].getProcessor(i);
                ip2.resetMinAndMax();
                if (output[1] == null) {
                    output[1] = new ImageStack(stacks[1].getWidth(), stacks[1].getHeight());
                }
                output[1].addSlice(ip2);
            }
        }
        return output;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private java.awt.Canvas canvas;
    private javax.swing.JScrollBar imageScrollBar;
    private javax.swing.JTextField imageTextField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton okButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JTextField removeTextField;
    private javax.swing.JScrollBar trajScrollBar;
    private javax.swing.JTextField trajTextField;
    // End of variables declaration//GEN-END:variables
}
